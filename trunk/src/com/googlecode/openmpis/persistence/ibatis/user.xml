<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="User">
    <!-- Type alias allow you to use a shorter name for long fully qualified class names. -->
    <typeAlias alias="user" type="com.googlecode.openmpis.dto.User"/>
    
    <cacheModel id="userCache" type="LRU">
        <flushOnExecute statement="insertUser"/>
        <flushOnExecute statement="updateUser"/>
        <flushOnExecute statement="updatePassword"/>
        <flushOnExecute statement="updateLogin"/>
        <flushOnExecute statement="deleteUser"/>
        <flushInterval hours="24"/>
    </cacheModel>
    
    <!-- Use primitive wrapper type (e.g. Integer) as parameter and allow results to
    be auto-mapped results to User object (JavaBean) properties -->
    <!--select id="getUser" resultMap="userResult"-->
    <select id="getUserByUsername" parameterClass="String" resultClass="user" cacheModel="userCache">
        SELECT
        ID as id,
        GROUPID as groupId,
        USERNAME as username,
        PASSWORD as password,
        FIRSTNAME as firstName,
        LASTNAME as lastName,
        EMAIL as email,
        STATUS as status,
        QUESTION as question,
        ANSWER as answer,
        CREATORID as creatorId
        FROM USER
        WHERE USERNAME = #username# AND STATUS = '0'
    </select>
    
    <select id="getUserById" parameterClass="java.lang.Integer" resultClass="user" cacheModel="userCache">
        SELECT
        ID as id,
        GROUPID as groupId,
        USERNAME as username,
        PASSWORD as password,
        FIRSTNAME as firstName,
        MIDDLENAME as middleName,
        LASTNAME as lastName,
        EMAIL as email,
        DESIGNATION as designation,
        AGENCY as agency,
        NUMBER as number,
        IPADDRESS as ipAddress,
        LASTLOGIN as lastLogin,
        DATE as date,
        STATUS as status,
        CREATORID as creatorId,
        QUESTION as question,
        ANSWER as answer
        FROM USER
        WHERE ID = #id#
    </select>
    
    <select id="getAllUsers" resultClass="user" cacheModel="userCache">
        SELECT
        ID as id,
        GROUPID as groupId,
        USERNAME as username,
        FIRSTNAME as firstName,
        MIDDLENAME as middleName,
        LASTNAME as lastName,
        EMAIL as email,
        DESIGNATION as designation,
        AGENCY as agency,
        NUMBER as number,
        IPADDRESS as ipAddress,
        LASTLOGIN as lastLogin,
        DATE as date,
        STATUS as status,
        CREATORID as creatorId
        FROM USER
    </select>
        
    <select id="checkUsername" parameterClass="user" resultClass="user" cacheModel="userCache">
        SELECT
        USERNAME as username
        FROM USER
        WHERE USERNAME = #username# AND ID != #id#
    </select>
        
    <select id="checkEmail" parameterClass="user" resultClass="user" cacheModel="userCache">
        SELECT
        EMAIL as email
        FROM USER
        WHERE EMAIL = #email# AND ID != #id# 
    </select>

    <!-- Use User object (JavaBean) properties as parameters for insert. Each of the
    parameters in the #hash# symbols is a JavaBeans property. -->
    <insert id="insertUser" parameterClass="user">
        INSERT INTO USER
        (GROUPID, USERNAME, PASSWORD, FIRSTNAME, MIDDLENAME, LASTNAME, EMAIL, DESIGNATION,
        AGENCY, NUMBER, DATE, STATUS, CREATORID, QUESTION)
        VALUES
        (#groupId#, #username#, MD5(#password#), #firstName#, #middleName#, #lastName#,
        #email#, #designation#, #agency#, #number#, #date#, #status#, #creatorId#, #question#)
    </insert>

    <!-- Use User object (JavaBean) properties as parameters for update. Each of the
    parameters in the #hash# symbols is a JavaBeans property. -->
    <update id="updateUser" parameterClass="user">
        UPDATE USER SET
        GROUPID = #groupId#,
        USERNAME = #username#,
        PASSWORD = MD5(#password#),
        FIRSTNAME = #firstName#,
        MIDDLENAME = #middleName#,
        LASTNAME = #lastName#,
        EMAIL = #email#,
        DESIGNATION = #designation#,
        AGENCY = #agency#,
        NUMBER = #number#,
        STATUS = #status#,
        QUESTION = #question#,
        ANSWER = #answer#
        WHERE ID = #id#
    </update>
    
    <update id="updatePassword" parameterClass="user">
        UPDATE USER SET
        PASSWORD = MD5(#password#)
        WHERE ID = #id#
    </update>
    
    <update id="updateLogin" parameterClass="user">
        UPDATE USER SET
        IPADDRESS = #ipAddress#,
        LASTLOGIN = #lastLogin#
        WHERE ID = #id#
    </update>

    <!-- Use User object (JavaBean) “id” properties as parameters for delete. Each of the
    parameters in the #hash# symbols is a JavaBeans property. -->
    <delete id="deleteUser" parameterClass="java.lang.Integer">
        DELETE FROM USER
        WHERE ID = #id#
    </delete>
</sqlMap>