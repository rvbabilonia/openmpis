<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="openmpis" default="default" basedir=".">
    <description>Builds, tests, and runs the project OpenMPIS.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties 
      -post-init:                called after initialization of project properties 
      -pre-compile:              called before javac compilation 
      -post-compile:             called after javac compilation 
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-dist:                 called before archive building 
      -post-dist:                called after archive building 
      -post-clean:               called after cleaning build products 
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-junit:   defines macro for junit execution
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    <target name="help" description="Displays this help menu.">
        <echo message="To build everything and install the database schema, type: ant"/>
        <echo message="You can now deploy dist/openmpis.war to the application server."/>
        <echo message=""/>
        <echo message="To create the WAR file only, type: ant dist"/>
        <echo message="This will create dist/openmpis.war."/>
        <echo message=""/>
        <echo message="To compile only, type: ant compile"/>
        <echo message="This will generate the compiled classes in the build/ directory."/>
        <echo message=""/>
        <echo message="To generate documentation only, type: ant javadoc"/>
        <echo message="This will generate the API's in the dist/javadocs directory."/>
        <echo message=""/>
        <echo message="To install the database schema only, type: ant create-database"/>
        <echo message=""/>
        <echo message="To remove the database schema, type: ant drop-database"/>
        <echo message=""/>
        <echo message="To start from scratch, type: ant clean"/>
        <echo message="This will erase build/ and dist/ directories."/>
    </target>
    <target depends="create-database" name="-post-dist"/>
    <target depends="library-inclusion-in-archive,javadoc-build" name="create-database" description="Installs the OpenMPIS schema on the MySQL database server.">
        <property file="src/sqlmapconfig.properties"/>
        <property name="sql.url" value="jdbc:mysql://localhost:3306"/>
        <sql driver="${driver}" url="${sql.url}" userid="${username}" password="${password}" src="database/MySQL/openmpis-mysql-schema-1.0.sql" rdbms="mysql">
            <classpath>
                <pathelement location="build/web/WEB-INF/lib/mysql-connector-java-5.1.6-bin.jar"/>
            </classpath>
        </sql>
    </target>
    <target depends="library-inclusion-in-archive" name="drop-database" description="Removes the database schema from the database server.">
        <input message="This will remove the database. Proceed?" validargs="y,n" addproperty="do.delete" />
        <condition property="do.abort">
            <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Database dropping aborted by user.</fail>
        <property file="src/sqlmapconfig.properties"/>
        <sql driver="${driver}" url="${url}" userid="${username}" password="${password}">
            <classpath>
                <pathelement location="build/web/WEB-INF/lib/mysql-connector-java-5.1.6-bin.jar"/>
            </classpath>
            DROP DATABASE openmpis;
        </sql>
    </target>
</project>